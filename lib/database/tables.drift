/*
IMPORTANT: Always use singular nouns for variables and table names.
So, the names will match data Classes generated by Drift.
*/

CREATE TABLE project (
    projectUuid TEXT NOT NULL PRIMARY KEY,
    projectName TEXT NOT NULL UNIQUE,
    projectDescription TEXT,
    principalInvestigator TEXT,
    collector TEXT,
    collectorInitial TEXT,
    collectorEmail TEXT,
    catNumStart INT,
    catNumEnd INT
);

CREATE TABLE site (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    siteID TEXT,
    projectUuid TEXT,
    leadStuff TEXT,
    siteType TEXT,
    country TEXT,
    stateProvince TEXT,
    county TEXT,
    municipality TEXT,
    locality TEXT, -- verbatim locality in DWC
    photoID INT REFERENCES photo(id)
);

CREATE TABLE coordinate (
    id TEXT UNIQUE PRIMARY KEY,
    decimalLatitude REAL,
    decimalLongitude REAL,
    elevationInMeter INT,
    minimumElevationInMeters INT,
    maximumElevationInMeters INT,
    coordinateUncertaintyInMeters INT,
    siteID TEXT REFERENCES site(siteID)
);

CREATE TABLE collEvent (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    projectUuid TEXT,
    startDate TEXT,
    startTime TEXT,
    endDate TEXT,
    endTime TEXT,
    primaryCollMethod TEXT,
    collMethodNotes TEXT,
    siteID TEXT REFERENCES site(siteID),
    FOREIGN KEY(projectUuid) REFERENCES project(projectUuid)
);

CREATE TABLE narrative (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    projectUuid TEXT,
    date TEXT,
    siteID TEXT,
    narrative TEXT,
    photoID INT REFERENCES photo(id),
    FOREIGN KEY(projectUuid) REFERENCES project(projectUuid),
    FOREIGN KEY(siteID) REFERENCES site(siteID)
);

CREATE TABLE photo (
    id INT PRIMARY KEY AUTOINCREMENT,
    filename TEXT,
    date TEXT,
    photographerID INT REFERENCES personnel(id),
    camera TEXT,
    lenses TEXT
);

CREATE TABLE personnel (
    id TEXT UNIQUE PRIMARY KEY,
    name TEXT,
    initial TEXT,
    affiliation TEXT,
    photoFileName TEXT
);

CREATE TABLE mammalSpecimen (
    specimenUuid TEXT,
    projectUuid TEXT,
    speciesID INT,
    condition TEXT,
    prepDate TEXT,
    prepTime TEXT,
    captureDate TEXT,
    captureTime TEXT,
    trapType TEXT,
    collectorID INT REFERENCES personnel(id),
    collEventID INT REFERENCES collEvent(id),
    measureID INT REFERENCES mammalMeasurement(id)
);

CREATE TABLE mammalMeasurement (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    totalLength INT,
    tailLength INT,
    hindFootLength INT,
    earLength INT,
    forearm INT,
    weight INT,
    inaccurate TEXT,
    inaccurateReason TEXT,
    sex TEXT,
    lifeStage TEXT,
    testesPosition TEXT,
    testesLength INT,
    testesWidth INT,
    reproductiveStage TEXT,
    placentalScars TEXT,
    mammaeInguinalCount INT,
    mammaeAxilaryCount INT,
    mammaeAbdominalCount INT,
    embryoLeftCount INT,
    embryoRightCount INT,
    embryoCRLeft INT,
    embryoCRRight INT
);

CREATE TABLE birdSpecimen (
    specimenUuid TEXT,
    projectUuid TEXT,
    speciesID INT,
    condition TEXT,
    prepDate TEXT,
    prepTime TEXT,
    captureDate TEXT,
    captureTime TEXT,
    trapType TEXT,
    collectorID INT REFERENCES personnel(id),
    collEventID INT REFERENCES collEvent(id),
    measureID INT REFERENCES birdMeasurement(id)
);

CREATE TABLE birdMeasurement (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    weight INT,
    wingspan INT,
    irisColor TEXT,
    feetColor TEXT,
    tarsusColor TEXT,
    moltingWing TEXT,
    moltingTail TEXT,
    bodyFat TEXT,
    bursaLength INT,
    bursaWidth INT,
    skullOssilation TEXT,
    fat TEXT,
    sex TEXT,
    gonad TEXT,
    stomach TEXT
);

CREATE TABLE part (
    specimenUuid TEXT,
    secondaryNumber TEXT, -- primary use prep number
    barcodeID TEXT,
    type TEXT,
    count TEXT,
    treatment TEXT,
    additionalTreatment TEXT,
    museumPermanent TEXT,
    museumLoan TEXT 
);

CREATE TABLE taxonomy (
    id INT PRIMARY KEY AUTOINCREMENT,
    genus TEXT,
    specificEpithet TEXT,
    intraspecificEpithet TEXT,
    taxonFamily TEXT,
    taxonOrder TEXT
);

listProject: SELECT projectUuid,projectName FROM project;