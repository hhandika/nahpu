/*
IMPORTANT: Always use singular nouns for variables and table names.
So, the names will match data Classes generated by Drift.
*/

CREATE TABLE project (
    uuid TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    principalInvestigator TEXT,
    location TEXT,
    startDate TEXT,
    endDate TEXT,
    created TEXT,
    lastAccessed Text
);

CREATE TABLE site (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    siteID TEXT,
    projectUuid TEXT,
    leadStaffId TEXT,
    siteType TEXT,
    country TEXT,
    stateProvince TEXT,
    county TEXT,
    municipality TEXT,
    mediaID TEXT,
    locality TEXT, -- verbatim locality in DWC
    remark TEXT,
    habitatType TEXT,
    habitatCondition TEXT,
    habitatDescription TEXT,
    FOREIGN KEY(mediaID) REFERENCES media(primaryId),
    FOREIGN KEY(leadStaffId) REFERENCES personnel(uuid)
);

CREATE TABLE coordinate (
    id INT UNIQUE PRIMARY KEY AUTOINCREMENT, -- internal id for easy access
    nameId TEXT, -- users assigned id.
    decimalLatitude REAL,
    decimalLongitude REAL,
    elevationInMeter INT,
    minimumElevationInMeters INT,
    maximumElevationInMeters INT,
    datum TEXT,
    uncertaintyInMeters INT,
    gpsUnit TEXT,
    notes TEXT,
    siteID INT,
    FOREIGN KEY(siteID) REFERENCES site(id)
);

CREATE TABLE collEvent (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    eventID TEXT,
    projectUuid TEXT,
    startDate TEXT,
    startTime TEXT,
    endDate TEXT,
    endTime TEXT,
    primaryCollMethod TEXT,
    collMethodNotes TEXT,
    siteID INT REFERENCES site(id),
    FOREIGN KEY(projectUuid) REFERENCES project(uuid)
);

CREATE TABLE weather (
    eventID INT,
    lowestDayTempC REAL,
    highestDayTempC REAL,
    lowestNightTempC REAL,
    highestNightTempC REAL,
    averageHumidity REAL,
    dewPointTemp REAL,
    sunriseTime TEXT,
    sunsetTime TEXT,
    moonPhase TEXT,
    notes TEXT,
    FOREIGN KEY(eventID) REFERENCES collEvent(id)
);

CREATE TABLE collPersonnel (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    eventID INT,
    personnelId TEXT,
    name TEXT, -- we add it here to save time pulling it from personnel data
    role TEXT, -- referring to collecting role, not project role
    FOREIGN KEY(eventID) REFERENCES collEvent(id),
    FOREIGN KEY(personnelId) REFERENCES personnel(uuid)
);

/*
Called method in the App.
It is too complex for migrating this this table
to a new name.
*/
CREATE TABLE collEffort (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    eventID INT,
    type TEXT,
    brand TEXT,
    count INT,
    size TEXT,
    notes TEXT,
    FOREIGN KEY(eventID) REFERENCES collEvent(id)
);

CREATE TABLE narrative (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    projectUuid TEXT,
    date TEXT,
    siteID INT,
    narrative TEXT,
    mediaID INT REFERENCES media(primaryId),
    FOREIGN KEY(projectUuid) REFERENCES project(uuid),
    FOREIGN KEY(siteID) REFERENCES site(id)
);

CREATE TABLE media (
    primaryId INT PRIMARY KEY AUTOINCREMENT,
    secondaryId TEXT,
    secondaryIdRef TEXT,
    fileId INT,
    taken TEXT,
    camera TEXT,
    lenses TEXT,
    personnelId TEXT,
    thumbnailPath TEXT,
    FOREIGN KEY(personnelId) REFERENCES personnel(uuid),
    FOREIGN KEY(fileId) REFERENCES fileMetadata(id)
);

CREATE TABLE associatedData (
    primaryId INT PRIMARY KEY AUTOINCREMENT,
    secondaryId TEXT,
    secondaryIdRef TEXT,
    type TEXT,
    description TEXT,
    fileId TEXT
);

CREATE TABLE fileMetadata (
    id INT PRIMARY KEY AUTOINCREMENT,
    filename TEXT,
    sizeKb REAL,
    relativePath TEXT,
    created TEXT
);

CREATE TABLE personnelList (
    projectUuid TEXT,
    personnelUuid TEXT,
    FOREIGN KEY(projectUuid) REFERENCES project(uuid),
    FOREIGN KEY(personnelUuid) REFERENCES personnel(uuid)
);

CREATE TABLE personnelPhoto (
    id INT PRIMARY KEY AUTOINCREMENT,
    fileId INT,
    FOREIGN KEY(fileId) REFERENCES fileMetadata(id)
);

CREATE TABLE personnel (
    uuid TEXT UNIQUE NOT NULL PRIMARY KEY,
    name TEXT,
    initial TEXT,
    email TEXT,
    phone TEXT,
    affiliation TEXT,
    role TEXT,
    currentFieldNumber INT, -- the next input for field number
    photoID INT,
    notes TEXT,
    FOREIGN KEY(photoID) REFERENCES personnelPhoto(id)
);

CREATE TABLE projectPersonnel (
    projectUuid TEXT,
    personnelId TEXT,
    FOREIGN KEY(projectUuid) REFERENCES project(uuid),
    FOREIGN KEY(personnelId) REFERENCES personnel(uuid)
);

CREATE TABLE taxonomy (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    taxonClass TEXT,
    taxonOrder TEXT,
    taxonFamily TEXT,
    genus TEXT,
    specificEpithet TEXT,
    commonName TEXT,
    notes TEXT,
    mediaId INT,
    FOREIGN KEY(mediaId) REFERENCES media(primaryId)
);

CREATE TABLE specimen (
    uuid TEXT UNIQUE NOT NULL PRIMARY KEY,
    projectUuid TEXT,
    speciesID INT,
    taxonGroup TEXT, -- use for catalog formats
    condition TEXT,
    prepDate TEXT,
    prepTime TEXT,
    collectedTime TEXT, -- late update
    captureDate TEXT,
    isRelativeTime INT,
    captureTime TEXT,
    trapType TEXT,
    trapID TEXT,
    coordinateID INT,
    catalogerID TEXT,
    fieldNumber INT,
    collEventID INT,
    isMultipleCollector INT,
    collPersonnelID INT,
    collMethodID INT,
    museumID TEXT,
    preparatorID TEXT REFERENCES personnel(uuid),
    FOREIGN KEY(projectUuid) REFERENCES project(uuid),
    FOREIGN KEY(catalogerID) REFERENCES personnel(uuid),
    FOREIGN KEY(collPersonnelID) REFERENCES collPersonnel(id),
    FOREIGN KEY(collMethodID) REFERENCES collEffort(id),
    FOREIGN KEY(speciesID) REFERENCES taxonomy(id),
    FOREIGN KEY(collEventID) REFERENCES collEvent(id)
);

CREATE TABLE mammalMeasurement (
    specimenUuid TEXT NOT NULL,
    totalLength REAL,
    tailLength REAL,
    hindFootLength REAL,
    earLength REAL,
    forearm REAL,
    weight REAL,
    accuracy TEXT,
    accuracySpecify TEXT,
    sex INT,
    age INT,
    testisPosition INT, -- encode using enum
    testisLength REAL,
    testisWidth REAL,
    epididymisAppearance INT,
    reproductiveStage INT,
    leftPlacentalScars INT,
    rightPlacentalScars INT,
    mammaeCondition INT,
    mammaeInguinalCount INT,
    mammaeAxillaryCount INT,
    mammaeAbdominalCount INT,
    vaginaOpening INT,
    pubicSymphysis INT,
    embryoLeftCount INT,
    embryoRightCount INT,
    embryoCR INT,
    remark TEXT,
    FOREIGN KEY(specimenUuid) REFERENCES specimen(uuid)
);

CREATE TABLE avianMeasurement (
    specimenUuid TEXT NOT NULL,
    weight REAL,
    wingspan REAL,
    irisColor TEXT,
    irisHex TEXT, -- Hex number for iris color
    billColor TEXT, 
    billHex TEXT,
    footColor TEXT, 
    footHex TEXT,
    tarsusColor TEXT, 
    tarsusHex TEXT,
    sex INT,
    broodPatch INT,
    skullOssification INT,
    hasBursa INT, -- newly add
    bursaWidth REAL, -- Newly add
    bursaLength REAL,
    fat INT,
    stomachContent TEXT,
    testisLength REAL,
    testisWidth REAL,
    testisRemark TEXT,
    ovaryLength REAL,
    ovaryWidth REAL,
    oviductWidth REAL,
    ovaryAppearance INT,
    firstOvaSize REAL,
    secondOvaSize REAL,
    thirdOvaSize REAL,
    oviductAppearance INT, -- encode to int to save space
    ovaryRemark TEXT,
    wingIsMolt INT, -- encode text
    wingMolt TEXT,
    tailIsMolt INT,
    tailMolt TEXT,
    bodyMolt INT, -- encode text
    moltRemark TEXT,
    specimenRemark TEXT,
    habitatRemark TEXT,
    FOREIGN KEY(specimenUuid) REFERENCES specimen(uuid)
);


CREATE TABLE specimenPart (
    id INT UNIQUE PRIMARY KEY AUTOINCREMENT, -- internal id
    specimenUuid TEXT,
    tissueID TEXT,
    barcodeID TEXT, -- primary use prep number
    type TEXT,
    count TEXT,
    treatment TEXT,
    additionalTreatment TEXT,
    dateTaken TEXT,
    timeTaken TEXT,
    museumPermanent TEXT,
    museumLoan TEXT,
    remark TEXT,
    FOREIGN KEY(specimenUuid) REFERENCES specimen(uuid) 
);

listProject: SELECT uuid,name,created,lastAccessed FROM project;