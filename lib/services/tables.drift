/*
IMPORTANT: Always use singular nouns for variables and table names.
So, the names will match data Classes generated by Drift.
*/

CREATE TABLE project (
    uuid TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    principalInvestigator TEXT,
    created TEXT,
    lastModified Text
);

CREATE TABLE site (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    siteID TEXT,
    projectUuid TEXT,
    leadStaffId TEXT,
    siteType TEXT,
    country TEXT,
    stateProvince TEXT,
    county TEXT,
    municipality TEXT,
    mediaID TEXT,
    locality TEXT, -- verbatim locality in DWC
    remark TEXT,
    habitatType TEXT,
    habitatCondition TEXT,
    habitatDescription TEXT,
    FOREIGN KEY(mediaID) REFERENCES media(primaryId),
    FOREIGN KEY(leadStaffId) REFERENCES personnel(uuid)
);

CREATE TABLE coordinate (
    id TEXT UNIQUE PRIMARY KEY,
    decimalLatitude REAL,
    decimalLongitude REAL,
    elevationInMeter INT,
    minimumElevationInMeters INT,
    maximumElevationInMeters INT,
    datum TEXT,
    coordinateUncertaintyInMeters INT,
    gpsUnit TEXT,
    notes TEXT,
    siteID TEXT REFERENCES site(siteID)
);

CREATE TABLE collEvent (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    eventID TEXT,
    projectUuid TEXT,
    startDate TEXT,
    startTime TEXT,
    endDate TEXT,
    endTime TEXT,
    primaryCollMethod TEXT,
    collMethodNotes TEXT,
    siteID TEXT REFERENCES site(siteID),
    FOREIGN KEY(projectUuid) REFERENCES project(uuid)
);

CREATE TABLE collectingPersonnel (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    personnelId TEXT,
    role TEXT, -- referring to collecting role, not project role
    FOREIGN KEY(personnelId) REFERENCES personnel(uuid)
);

CREATE TABLE collEffort (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    eventID TEXT,
    projectUuid TEXT,
    type TEXT,
    brand TEXT,
    count INT,
    size TEXT,
    FOREIGN KEY(eventID) REFERENCES collEvent(eventID),
    FOREIGN KEY(projectUuid) REFERENCES project(uuid)
);

CREATE TABLE narrative (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    projectUuid TEXT,
    date TEXT,
    siteID TEXT,
    narrative TEXT,
    mediaID INT REFERENCES media(primaryId),
    FOREIGN KEY(projectUuid) REFERENCES project(uuid),
    FOREIGN KEY(siteID) REFERENCES site(siteID)
);

CREATE TABLE media (
    primaryId INT PRIMARY KEY AUTOINCREMENT,
    secondaryId TEXT,
    secondaryIdRef TEXT,
    fileId INT,
    taken TEXT,
    camera TEXT,
    lenses TEXT,
    personnelId TEXT,
    FOREIGN KEY(personnelId) REFERENCES personnel(uuid),
    FOREIGN KEY(fileId) REFERENCES fileMetadata(id)
);

CREATE TABLE associatedData (
    primaryId INT PRIMARY KEY AUTOINCREMENT,
    secondaryId TEXT,
    secondaryIdRef,
    type,
    description TEXT,
    fileId TEXT
);

CREATE TABLE fileMetadata (
    id INT PRIMARY KEY AUTOINCREMENT,
    filename TEXT,
    sizeKb REAL,
    relativePath,
    created TEXT
);

CREATE TABLE personnelList (
    projectUuid TEXT,
    personnelUuid TEXT,
    FOREIGN KEY(projectUuid) REFERENCES project(uuid),
    FOREIGN KEY(personnelUuid) REFERENCES personnel(uuid)
);

CREATE TABLE personnelPhoto (
    id INT PRIMARY KEY AUTOINCREMENT,
    fileId INT,
    FOREIGN KEY(fileId) REFERENCES fileMetadata(id)
);

CREATE TABLE personnel (
    uuid TEXT UNIQUE NOT NULL PRIMARY KEY,
    name TEXT,
    initial TEXT,
    email TEXT,
    affiliation TEXT,
    role TEXT,
    nextCollectorNumber INT,
    personnelPhoto INT,
    FOREIGN KEY(personnelPhoto) REFERENCES personnelPhoto(id)
);

CREATE TABLE projectPersonnel (
    projectUuid TEXT,
    personnelId TEXT,
    FOREIGN KEY(projectUuid) REFERENCES project(uuid),
    FOREIGN KEY(personnelId) REFERENCES personnel(uuid)
);

CREATE TABLE specimen (
    uuid TEXT UNIQUE NOT NULL PRIMARY KEY,
    projectUuid TEXT,
    speciesID INT,
    taxonGroup TEXT, -- use for catalog formats
    condition TEXT,
    prepDate TEXT,
    prepTime TEXT,
    captureDate TEXT,
    captureTime TEXT,
    trapType TEXT,
    collectorID TEXT,
    collectorNumber INT,
    collEventID INT,
    preparatorID TEXT REFERENCES personnel(uuid),
    FOREIGN KEY(projectUuid) REFERENCES project(uuid),
    FOREIGN KEY(collectorID) REFERENCES personnel(uuid),
    FOREIGN KEY(collEventID) REFERENCES collEvent(id)
);

CREATE TABLE mammalMeasurement (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    specimenUuid TEXT,
    totalLength INT,
    tailLength INT,
    hindFootLength INT,
    earLength INT,
    forearm INT,
    weight INT,
    inaccurate TEXT,
    inaccurateReason TEXT,
    sex TEXT,
    lifeStage TEXT,
    testesPosition TEXT,
    testesLength INT,
    testesWidth INT,
    reproductiveStage TEXT,
    placentalScars TEXT,
    mammaeInguinalCount INT,
    mammaeAxilaryCount INT,
    mammaeAbdominalCount INT,
    embryoLeftCount INT,
    embryoRightCount INT,
    embryoCRLeft INT,
    embryoCRRight INT,
    FOREIGN KEY(specimenUuid) REFERENCES specimen(uuid)
);

CREATE TABLE birdMeasurement (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    specimenUuid TEXT,
    weight INT,
    wingspan INT,
    irisColor TEXT,
    feetColor TEXT,
    tarsusColor TEXT,
    moltingWing TEXT,
    moltingTail TEXT,
    bodyFat TEXT,
    bursaLength INT,
    bursaWidth INT,
    skullOssilation TEXT,
    fat TEXT,
    sex TEXT,
    gonad TEXT,
    stomach TEXT,
    FOREIGN KEY(specimenUuid) REFERENCES specimen(uuid)
);

CREATE TABLE part (
    specimenUuid TEXT,
    secondaryNumber TEXT, -- primary use prep number
    barcodeID TEXT,
    type TEXT,
    count TEXT,
    treatment TEXT,
    additionalTreatment TEXT,
    museumPermanent TEXT,
    museumLoan TEXT 
);

CREATE TABLE taxonomy (
    id INT PRIMARY KEY AUTOINCREMENT,
    taxonClass TEXT,
    taxonOrder TEXT,
    taxonFamily TEXT,
    genus TEXT,
    specificEpithet TEXT,
    intraspecificEpithet TEXT,
    commonName,
    note TEXT,
    mediaId INT,
    FOREIGN KEY(mediaId) REFERENCES media(primaryId)
);

CREATE TABLE expense (
    id INT PRIMARY KEY AUTOINCREMENT,
    category TEXT,
    item TEXT,
    description TEXT,
    budget REAL,
    actual REAL,
    projectUuid TEXT,
    FOREIGN KEY(projectUuid) REFERENCES project(uuid) 
);

listProject: SELECT uuid,name,created,lastModified FROM project;